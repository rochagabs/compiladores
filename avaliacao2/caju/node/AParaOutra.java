/* This file was generated by SableCC (http://www.sablecc.org/). */

package caju.node;

import caju.analysis.*;

@SuppressWarnings("nls")
public final class AParaOutra extends POutra
{
    private TPara _para_;
    private TParEsq _parEsq_;
    private PListaAtrib _atribEsq_;
    private TPontoEVirgula _esq_;
    private PExp _exp_;
    private TPontoEVirgula _dir_;
    private PListaAtrib _atribDir_;
    private TParDir _parDir_;
    private PComando _comando_;

    public AParaOutra()
    {
        // Constructor
    }

    public AParaOutra(
        @SuppressWarnings("hiding") TPara _para_,
        @SuppressWarnings("hiding") TParEsq _parEsq_,
        @SuppressWarnings("hiding") PListaAtrib _atribEsq_,
        @SuppressWarnings("hiding") TPontoEVirgula _esq_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TPontoEVirgula _dir_,
        @SuppressWarnings("hiding") PListaAtrib _atribDir_,
        @SuppressWarnings("hiding") TParDir _parDir_,
        @SuppressWarnings("hiding") PComando _comando_)
    {
        // Constructor
        setPara(_para_);

        setParEsq(_parEsq_);

        setAtribEsq(_atribEsq_);

        setEsq(_esq_);

        setExp(_exp_);

        setDir(_dir_);

        setAtribDir(_atribDir_);

        setParDir(_parDir_);

        setComando(_comando_);

    }

    @Override
    public Object clone()
    {
        return new AParaOutra(
            cloneNode(this._para_),
            cloneNode(this._parEsq_),
            cloneNode(this._atribEsq_),
            cloneNode(this._esq_),
            cloneNode(this._exp_),
            cloneNode(this._dir_),
            cloneNode(this._atribDir_),
            cloneNode(this._parDir_),
            cloneNode(this._comando_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParaOutra(this);
    }

    public TPara getPara()
    {
        return this._para_;
    }

    public void setPara(TPara node)
    {
        if(this._para_ != null)
        {
            this._para_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._para_ = node;
    }

    public TParEsq getParEsq()
    {
        return this._parEsq_;
    }

    public void setParEsq(TParEsq node)
    {
        if(this._parEsq_ != null)
        {
            this._parEsq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parEsq_ = node;
    }

    public PListaAtrib getAtribEsq()
    {
        return this._atribEsq_;
    }

    public void setAtribEsq(PListaAtrib node)
    {
        if(this._atribEsq_ != null)
        {
            this._atribEsq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._atribEsq_ = node;
    }

    public TPontoEVirgula getEsq()
    {
        return this._esq_;
    }

    public void setEsq(TPontoEVirgula node)
    {
        if(this._esq_ != null)
        {
            this._esq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._esq_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TPontoEVirgula getDir()
    {
        return this._dir_;
    }

    public void setDir(TPontoEVirgula node)
    {
        if(this._dir_ != null)
        {
            this._dir_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dir_ = node;
    }

    public PListaAtrib getAtribDir()
    {
        return this._atribDir_;
    }

    public void setAtribDir(PListaAtrib node)
    {
        if(this._atribDir_ != null)
        {
            this._atribDir_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._atribDir_ = node;
    }

    public TParDir getParDir()
    {
        return this._parDir_;
    }

    public void setParDir(TParDir node)
    {
        if(this._parDir_ != null)
        {
            this._parDir_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parDir_ = node;
    }

    public PComando getComando()
    {
        return this._comando_;
    }

    public void setComando(PComando node)
    {
        if(this._comando_ != null)
        {
            this._comando_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comando_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._para_)
            + toString(this._parEsq_)
            + toString(this._atribEsq_)
            + toString(this._esq_)
            + toString(this._exp_)
            + toString(this._dir_)
            + toString(this._atribDir_)
            + toString(this._parDir_)
            + toString(this._comando_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._para_ == child)
        {
            this._para_ = null;
            return;
        }

        if(this._parEsq_ == child)
        {
            this._parEsq_ = null;
            return;
        }

        if(this._atribEsq_ == child)
        {
            this._atribEsq_ = null;
            return;
        }

        if(this._esq_ == child)
        {
            this._esq_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._dir_ == child)
        {
            this._dir_ = null;
            return;
        }

        if(this._atribDir_ == child)
        {
            this._atribDir_ = null;
            return;
        }

        if(this._parDir_ == child)
        {
            this._parDir_ = null;
            return;
        }

        if(this._comando_ == child)
        {
            this._comando_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._para_ == oldChild)
        {
            setPara((TPara) newChild);
            return;
        }

        if(this._parEsq_ == oldChild)
        {
            setParEsq((TParEsq) newChild);
            return;
        }

        if(this._atribEsq_ == oldChild)
        {
            setAtribEsq((PListaAtrib) newChild);
            return;
        }

        if(this._esq_ == oldChild)
        {
            setEsq((TPontoEVirgula) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._dir_ == oldChild)
        {
            setDir((TPontoEVirgula) newChild);
            return;
        }

        if(this._atribDir_ == oldChild)
        {
            setAtribDir((PListaAtrib) newChild);
            return;
        }

        if(this._parDir_ == oldChild)
        {
            setParDir((TParDir) newChild);
            return;
        }

        if(this._comando_ == oldChild)
        {
            setComando((PComando) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
