/* This file was generated by SableCC (http://www.sablecc.org/). */

package caju.node;

import java.util.*;
import caju.analysis.*;

@SuppressWarnings("nls")
public final class AVetorTipo extends PTipo
{
    private TVetorPalavra _vetorPalavra_;
    private PTipoBase _tipoBase_;
    private TColcheteEsq _colcheteEsq_;
    private PExp _exp_;
    private TColcheteDir _colcheteDir_;
    private final LinkedList<PVetorEstrela> _vetorEstrela_ = new LinkedList<PVetorEstrela>();

    public AVetorTipo()
    {
        // Constructor
    }

    public AVetorTipo(
        @SuppressWarnings("hiding") TVetorPalavra _vetorPalavra_,
        @SuppressWarnings("hiding") PTipoBase _tipoBase_,
        @SuppressWarnings("hiding") TColcheteEsq _colcheteEsq_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TColcheteDir _colcheteDir_,
        @SuppressWarnings("hiding") List<?> _vetorEstrela_)
    {
        // Constructor
        setVetorPalavra(_vetorPalavra_);

        setTipoBase(_tipoBase_);

        setColcheteEsq(_colcheteEsq_);

        setExp(_exp_);

        setColcheteDir(_colcheteDir_);

        setVetorEstrela(_vetorEstrela_);

    }

    @Override
    public Object clone()
    {
        return new AVetorTipo(
            cloneNode(this._vetorPalavra_),
            cloneNode(this._tipoBase_),
            cloneNode(this._colcheteEsq_),
            cloneNode(this._exp_),
            cloneNode(this._colcheteDir_),
            cloneList(this._vetorEstrela_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVetorTipo(this);
    }

    public TVetorPalavra getVetorPalavra()
    {
        return this._vetorPalavra_;
    }

    public void setVetorPalavra(TVetorPalavra node)
    {
        if(this._vetorPalavra_ != null)
        {
            this._vetorPalavra_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._vetorPalavra_ = node;
    }

    public PTipoBase getTipoBase()
    {
        return this._tipoBase_;
    }

    public void setTipoBase(PTipoBase node)
    {
        if(this._tipoBase_ != null)
        {
            this._tipoBase_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tipoBase_ = node;
    }

    public TColcheteEsq getColcheteEsq()
    {
        return this._colcheteEsq_;
    }

    public void setColcheteEsq(TColcheteEsq node)
    {
        if(this._colcheteEsq_ != null)
        {
            this._colcheteEsq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colcheteEsq_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TColcheteDir getColcheteDir()
    {
        return this._colcheteDir_;
    }

    public void setColcheteDir(TColcheteDir node)
    {
        if(this._colcheteDir_ != null)
        {
            this._colcheteDir_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colcheteDir_ = node;
    }

    public LinkedList<PVetorEstrela> getVetorEstrela()
    {
        return this._vetorEstrela_;
    }

    public void setVetorEstrela(List<?> list)
    {
        for(PVetorEstrela e : this._vetorEstrela_)
        {
            e.parent(null);
        }
        this._vetorEstrela_.clear();

        for(Object obj_e : list)
        {
            PVetorEstrela e = (PVetorEstrela) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._vetorEstrela_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._vetorPalavra_)
            + toString(this._tipoBase_)
            + toString(this._colcheteEsq_)
            + toString(this._exp_)
            + toString(this._colcheteDir_)
            + toString(this._vetorEstrela_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._vetorPalavra_ == child)
        {
            this._vetorPalavra_ = null;
            return;
        }

        if(this._tipoBase_ == child)
        {
            this._tipoBase_ = null;
            return;
        }

        if(this._colcheteEsq_ == child)
        {
            this._colcheteEsq_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._colcheteDir_ == child)
        {
            this._colcheteDir_ = null;
            return;
        }

        if(this._vetorEstrela_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._vetorPalavra_ == oldChild)
        {
            setVetorPalavra((TVetorPalavra) newChild);
            return;
        }

        if(this._tipoBase_ == oldChild)
        {
            setTipoBase((PTipoBase) newChild);
            return;
        }

        if(this._colcheteEsq_ == oldChild)
        {
            setColcheteEsq((TColcheteEsq) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._colcheteDir_ == oldChild)
        {
            setColcheteDir((TColcheteDir) newChild);
            return;
        }

        for(ListIterator<PVetorEstrela> i = this._vetorEstrela_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVetorEstrela) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
