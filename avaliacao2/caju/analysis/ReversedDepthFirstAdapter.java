/* This file was generated by SableCC (http://www.sablecc.org/). */

package caju.analysis;

import java.util.*;
import caju.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPrograma().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        {
            List<PDecFuncao> copy = new ArrayList<PDecFuncao>(node.getDecFuncao());
            Collections.reverse(copy);
            for(PDecFuncao e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDecVariavel> copy = new ArrayList<PDecVariavel>(node.getDecVariavel());
            Collections.reverse(copy);
            for(PDecVariavel e : copy)
            {
                e.apply(this);
            }
        }
        outAPrograma(node);
    }

    public void inADecVariavel(ADecVariavel node)
    {
        defaultIn(node);
    }

    public void outADecVariavel(ADecVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVariavel(ADecVariavel node)
    {
        inADecVariavel(node);
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        if(node.getListaNomes() != null)
        {
            node.getListaNomes().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outADecVariavel(node);
    }

    public void inAIdentificadoresListaNomes(AIdentificadoresListaNomes node)
    {
        defaultIn(node);
    }

    public void outAIdentificadoresListaNomes(AIdentificadoresListaNomes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentificadoresListaNomes(AIdentificadoresListaNomes node)
    {
        inAIdentificadoresListaNomes(node);
        if(node.getListaNomes() != null)
        {
            node.getListaNomes().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIdentificadoresListaNomes(node);
    }

    public void inAIdentificadorListaNomes(AIdentificadorListaNomes node)
    {
        defaultIn(node);
    }

    public void outAIdentificadorListaNomes(AIdentificadorListaNomes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentificadorListaNomes(AIdentificadorListaNomes node)
    {
        inAIdentificadorListaNomes(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIdentificadorListaNomes(node);
    }

    public void inATipoBaseTipo(ATipoBaseTipo node)
    {
        defaultIn(node);
    }

    public void outATipoBaseTipo(ATipoBaseTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoBaseTipo(ATipoBaseTipo node)
    {
        inATipoBaseTipo(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outATipoBaseTipo(node);
    }

    public void inAVetorTipo(AVetorTipo node)
    {
        defaultIn(node);
    }

    public void outAVetorTipo(AVetorTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorTipo(AVetorTipo node)
    {
        inAVetorTipo(node);
        {
            List<PVetorEstrela> copy = new ArrayList<PVetorEstrela>(node.getVetorEstrela());
            Collections.reverse(copy);
            for(PVetorEstrela e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getColcheteDir() != null)
        {
            node.getColcheteDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getColcheteEsq() != null)
        {
            node.getColcheteEsq().apply(this);
        }
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        if(node.getVetorPalavra() != null)
        {
            node.getVetorPalavra().apply(this);
        }
        outAVetorTipo(node);
    }

    public void inAVetorEstrela(AVetorEstrela node)
    {
        defaultIn(node);
    }

    public void outAVetorEstrela(AVetorEstrela node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorEstrela(AVetorEstrela node)
    {
        inAVetorEstrela(node);
        if(node.getColcheteDir() != null)
        {
            node.getColcheteDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getColcheteEsq() != null)
        {
            node.getColcheteEsq().apply(this);
        }
        outAVetorEstrela(node);
    }

    public void inABooleanoPalavraTipoBase(ABooleanoPalavraTipoBase node)
    {
        defaultIn(node);
    }

    public void outABooleanoPalavraTipoBase(ABooleanoPalavraTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanoPalavraTipoBase(ABooleanoPalavraTipoBase node)
    {
        inABooleanoPalavraTipoBase(node);
        if(node.getBooleanoPalavra() != null)
        {
            node.getBooleanoPalavra().apply(this);
        }
        outABooleanoPalavraTipoBase(node);
    }

    public void inACaracterePalavraTipoBase(ACaracterePalavraTipoBase node)
    {
        defaultIn(node);
    }

    public void outACaracterePalavraTipoBase(ACaracterePalavraTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaracterePalavraTipoBase(ACaracterePalavraTipoBase node)
    {
        inACaracterePalavraTipoBase(node);
        if(node.getCaracterePalavra() != null)
        {
            node.getCaracterePalavra().apply(this);
        }
        outACaracterePalavraTipoBase(node);
    }

    public void inANumeroPalavraTipoBase(ANumeroPalavraTipoBase node)
    {
        defaultIn(node);
    }

    public void outANumeroPalavraTipoBase(ANumeroPalavraTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroPalavraTipoBase(ANumeroPalavraTipoBase node)
    {
        inANumeroPalavraTipoBase(node);
        if(node.getNumeroPalavra() != null)
        {
            node.getNumeroPalavra().apply(this);
        }
        outANumeroPalavraTipoBase(node);
    }

    public void inADecFuncao(ADecFuncao node)
    {
        defaultIn(node);
    }

    public void outADecFuncao(ADecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncao(ADecFuncao node)
    {
        inADecFuncao(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getTipoRetorno() != null)
        {
            node.getTipoRetorno().apply(this);
        }
        if(node.getIniciador() != null)
        {
            node.getIniciador().apply(this);
        }
        outADecFuncao(node);
    }

    public void inATipoTipoRetorno(ATipoTipoRetorno node)
    {
        defaultIn(node);
    }

    public void outATipoTipoRetorno(ATipoTipoRetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoTipoRetorno(ATipoTipoRetorno node)
    {
        inATipoTipoRetorno(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outATipoTipoRetorno(node);
    }

    public void inAVazioTipoRetorno(AVazioTipoRetorno node)
    {
        defaultIn(node);
    }

    public void outAVazioTipoRetorno(AVazioTipoRetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioTipoRetorno(AVazioTipoRetorno node)
    {
        inAVazioTipoRetorno(node);
        if(node.getPalavraVazio() != null)
        {
            node.getPalavraVazio().apply(this);
        }
        outAVazioTipoRetorno(node);
    }

    public void inANadaParametros(ANadaParametros node)
    {
        defaultIn(node);
    }

    public void outANadaParametros(ANadaParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANadaParametros(ANadaParametros node)
    {
        inANadaParametros(node);
        outANadaParametros(node);
    }

    public void inAVariosParametrosParametros(AVariosParametrosParametros node)
    {
        defaultIn(node);
    }

    public void outAVariosParametrosParametros(AVariosParametrosParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariosParametrosParametros(AVariosParametrosParametros node)
    {
        inAVariosParametrosParametros(node);
        {
            List<PParametroEstrela> copy = new ArrayList<PParametroEstrela>(node.getParametroEstrela());
            Collections.reverse(copy);
            for(PParametroEstrela e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAVariosParametrosParametros(node);
    }

    public void inAParametro(AParametro node)
    {
        defaultIn(node);
    }

    public void outAParametro(AParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametro(AParametro node)
    {
        inAParametro(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAParametro(node);
    }

    public void inAParametroEstrela(AParametroEstrela node)
    {
        defaultIn(node);
    }

    public void outAParametroEstrela(AParametroEstrela node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametroEstrela(AParametroEstrela node)
    {
        inAParametroEstrela(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        if(node.getBarra() != null)
        {
            node.getBarra().apply(this);
        }
        outAParametroEstrela(node);
    }

    public void inABloco(ABloco node)
    {
        defaultIn(node);
    }

    public void outABloco(ABloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABloco(ABloco node)
    {
        inABloco(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDecVariavel> copy = new ArrayList<PDecVariavel>(node.getDecVariavel());
            Collections.reverse(copy);
            for(PDecVariavel e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        outABloco(node);
    }

    public void inAAtrib(AAtrib node)
    {
        defaultIn(node);
    }

    public void outAAtrib(AAtrib node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtrib(AAtrib node)
    {
        inAAtrib(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAAtrib(node);
    }

    public void inAListaAtrib(AListaAtrib node)
    {
        defaultIn(node);
    }

    public void outAListaAtrib(AListaAtrib node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaAtrib(AListaAtrib node)
    {
        inAListaAtrib(node);
        {
            List<PAtribEstrela> copy = new ArrayList<PAtribEstrela>(node.getAtribEstrela());
            Collections.reverse(copy);
            for(PAtribEstrela e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        outAListaAtrib(node);
    }

    public void inAAtribEstrela(AAtribEstrela node)
    {
        defaultIn(node);
    }

    public void outAAtribEstrela(AAtribEstrela node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribEstrela(AAtribEstrela node)
    {
        inAAtribEstrela(node);
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outAAtribEstrela(node);
    }

    public void inAComandoComando(AComandoComando node)
    {
        defaultIn(node);
    }

    public void outAComandoComando(AComandoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoComando(AComandoComando node)
    {
        inAComandoComando(node);
        if(node.getComandoCasam() != null)
        {
            node.getComandoCasam().apply(this);
        }
        outAComandoComando(node);
    }

    public void inAComandoSemOpcionalComando(AComandoSemOpcionalComando node)
    {
        defaultIn(node);
    }

    public void outAComandoSemOpcionalComando(AComandoSemOpcionalComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoSemOpcionalComando(AComandoSemOpcionalComando node)
    {
        inAComandoSemOpcionalComando(node);
        if(node.getComandoSemCasam() != null)
        {
            node.getComandoSemCasam().apply(this);
        }
        outAComandoSemOpcionalComando(node);
    }

    public void inASeComandoCasam(ASeComandoCasam node)
    {
        defaultIn(node);
    }

    public void outASeComandoCasam(ASeComandoCasam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComandoCasam(ASeComandoCasam node)
    {
        inASeComandoCasam(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeComandoCasam(node);
    }

    public void inAOutraComandoCasam(AOutraComandoCasam node)
    {
        defaultIn(node);
    }

    public void outAOutraComandoCasam(AOutraComandoCasam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOutraComandoCasam(AOutraComandoCasam node)
    {
        inAOutraComandoCasam(node);
        if(node.getOutra() != null)
        {
            node.getOutra().apply(this);
        }
        outAOutraComandoCasam(node);
    }

    public void inASeComandoSemCasam(ASeComandoSemCasam node)
    {
        defaultIn(node);
    }

    public void outASeComandoSemCasam(ASeComandoSemCasam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComandoSemCasam(ASeComandoSemCasam node)
    {
        inASeComandoSemCasam(node);
        if(node.getComandoCasam() != null)
        {
            node.getComandoCasam().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeComandoSemCasam(node);
    }

    public void inAEnquantoOutra(AEnquantoOutra node)
    {
        defaultIn(node);
    }

    public void outAEnquantoOutra(AEnquantoOutra node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoOutra(AEnquantoOutra node)
    {
        inAEnquantoOutra(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAEnquantoOutra(node);
    }

    public void inAParaOutra(AParaOutra node)
    {
        defaultIn(node);
    }

    public void outAParaOutra(AParaOutra node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaOutra(AParaOutra node)
    {
        inAParaOutra(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getAtribDir() != null)
        {
            node.getAtribDir().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getAtribEsq() != null)
        {
            node.getAtribEsq().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outAParaOutra(node);
    }

    public void inAParaCadaOutra(AParaCadaOutra node)
    {
        defaultIn(node);
    }

    public void outAParaCadaOutra(AParaCadaOutra node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaCadaOutra(AParaCadaOutra node)
    {
        inAParaCadaOutra(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getParaCada() != null)
        {
            node.getParaCada().apply(this);
        }
        outAParaCadaOutra(node);
    }

    public void inAAtribPontoOutra(AAtribPontoOutra node)
    {
        defaultIn(node);
    }

    public void outAAtribPontoOutra(AAtribPontoOutra node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribPontoOutra(AAtribPontoOutra node)
    {
        inAAtribPontoOutra(node);
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        outAAtribPontoOutra(node);
    }

    public void inARetorneOutra(ARetorneOutra node)
    {
        defaultIn(node);
    }

    public void outARetorneOutra(ARetorneOutra node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetorneOutra(ARetorneOutra node)
    {
        inARetorneOutra(node);
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRetorne() != null)
        {
            node.getRetorne().apply(this);
        }
        outARetorneOutra(node);
    }

    public void inABlocoOutra(ABlocoOutra node)
    {
        defaultIn(node);
    }

    public void outABlocoOutra(ABlocoOutra node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoOutra(ABlocoOutra node)
    {
        inABlocoOutra(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outABlocoOutra(node);
    }

    public void inAChamadaOutra(AChamadaOutra node)
    {
        defaultIn(node);
    }

    public void outAChamadaOutra(AChamadaOutra node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaOutra(AChamadaOutra node)
    {
        inAChamadaOutra(node);
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        outAChamadaOutra(node);
    }

    public void inAIdentificadorVar(AIdentificadorVar node)
    {
        defaultIn(node);
    }

    public void outAIdentificadorVar(AIdentificadorVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentificadorVar(AIdentificadorVar node)
    {
        inAIdentificadorVar(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIdentificadorVar(node);
    }

    public void inAVarVar(AVarVar node)
    {
        defaultIn(node);
    }

    public void outAVarVar(AVarVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarVar(AVarVar node)
    {
        inAVarVar(node);
        if(node.getColcheteDir() != null)
        {
            node.getColcheteDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getColcheteEsq() != null)
        {
            node.getColcheteEsq().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarVar(node);
    }

    public void inAChamadaExp(AChamadaExp node)
    {
        defaultIn(node);
    }

    public void outAChamadaExp(AChamadaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaExp(AChamadaExp node)
    {
        inAChamadaExp(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        outAChamadaExp(node);
    }

    public void inANivelZeroExp(ANivelZeroExp node)
    {
        defaultIn(node);
    }

    public void outANivelZeroExp(ANivelZeroExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANivelZeroExp(ANivelZeroExp node)
    {
        inANivelZeroExp(node);
        if(node.getNivelUm() != null)
        {
            node.getNivelUm().apply(this);
        }
        if(node.getPreceOu() != null)
        {
            node.getPreceOu().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outANivelZeroExp(node);
    }

    public void inANivelUmExp(ANivelUmExp node)
    {
        defaultIn(node);
    }

    public void outANivelUmExp(ANivelUmExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANivelUmExp(ANivelUmExp node)
    {
        inANivelUmExp(node);
        if(node.getNivelUm() != null)
        {
            node.getNivelUm().apply(this);
        }
        outANivelUmExp(node);
    }

    public void inAPreceOu(APreceOu node)
    {
        defaultIn(node);
    }

    public void outAPreceOu(APreceOu node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPreceOu(APreceOu node)
    {
        inAPreceOu(node);
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        outAPreceOu(node);
    }

    public void inAPreceE(APreceE node)
    {
        defaultIn(node);
    }

    public void outAPreceE(APreceE node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPreceE(APreceE node)
    {
        inAPreceE(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outAPreceE(node);
    }

    public void inANivelUmNivelUm(ANivelUmNivelUm node)
    {
        defaultIn(node);
    }

    public void outANivelUmNivelUm(ANivelUmNivelUm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANivelUmNivelUm(ANivelUmNivelUm node)
    {
        inANivelUmNivelUm(node);
        if(node.getNivelDois() != null)
        {
            node.getNivelDois().apply(this);
        }
        if(node.getPreceE() != null)
        {
            node.getPreceE().apply(this);
        }
        if(node.getNivelUm() != null)
        {
            node.getNivelUm().apply(this);
        }
        outANivelUmNivelUm(node);
    }

    public void inANivelDoisNivelUm(ANivelDoisNivelUm node)
    {
        defaultIn(node);
    }

    public void outANivelDoisNivelUm(ANivelDoisNivelUm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANivelDoisNivelUm(ANivelDoisNivelUm node)
    {
        inANivelDoisNivelUm(node);
        if(node.getNivelDois() != null)
        {
            node.getNivelDois().apply(this);
        }
        outANivelDoisNivelUm(node);
    }

    public void inAPreceIgual(APreceIgual node)
    {
        defaultIn(node);
    }

    public void outAPreceIgual(APreceIgual node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPreceIgual(APreceIgual node)
    {
        inAPreceIgual(node);
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        outAPreceIgual(node);
    }

    public void inANivelDoisNivelDois(ANivelDoisNivelDois node)
    {
        defaultIn(node);
    }

    public void outANivelDoisNivelDois(ANivelDoisNivelDois node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANivelDoisNivelDois(ANivelDoisNivelDois node)
    {
        inANivelDoisNivelDois(node);
        if(node.getNivelTres() != null)
        {
            node.getNivelTres().apply(this);
        }
        if(node.getPreceIgual() != null)
        {
            node.getPreceIgual().apply(this);
        }
        if(node.getNivelDois() != null)
        {
            node.getNivelDois().apply(this);
        }
        outANivelDoisNivelDois(node);
    }

    public void inANivelTresNivelDois(ANivelTresNivelDois node)
    {
        defaultIn(node);
    }

    public void outANivelTresNivelDois(ANivelTresNivelDois node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANivelTresNivelDois(ANivelTresNivelDois node)
    {
        inANivelTresNivelDois(node);
        if(node.getNivelTres() != null)
        {
            node.getNivelTres().apply(this);
        }
        outANivelTresNivelDois(node);
    }

    public void inAMenorIgualPreceMaiorMenorIgual(AMenorIgualPreceMaiorMenorIgual node)
    {
        defaultIn(node);
    }

    public void outAMenorIgualPreceMaiorMenorIgual(AMenorIgualPreceMaiorMenorIgual node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIgualPreceMaiorMenorIgual(AMenorIgualPreceMaiorMenorIgual node)
    {
        inAMenorIgualPreceMaiorMenorIgual(node);
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        outAMenorIgualPreceMaiorMenorIgual(node);
    }

    public void inAMaiorIgualPreceMaiorMenorIgual(AMaiorIgualPreceMaiorMenorIgual node)
    {
        defaultIn(node);
    }

    public void outAMaiorIgualPreceMaiorMenorIgual(AMaiorIgualPreceMaiorMenorIgual node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorIgualPreceMaiorMenorIgual(AMaiorIgualPreceMaiorMenorIgual node)
    {
        inAMaiorIgualPreceMaiorMenorIgual(node);
        if(node.getMaiorIgual() != null)
        {
            node.getMaiorIgual().apply(this);
        }
        outAMaiorIgualPreceMaiorMenorIgual(node);
    }

    public void inAMenorPreceMaiorMenorIgual(AMenorPreceMaiorMenorIgual node)
    {
        defaultIn(node);
    }

    public void outAMenorPreceMaiorMenorIgual(AMenorPreceMaiorMenorIgual node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorPreceMaiorMenorIgual(AMenorPreceMaiorMenorIgual node)
    {
        inAMenorPreceMaiorMenorIgual(node);
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        outAMenorPreceMaiorMenorIgual(node);
    }

    public void inAMaiorPreceMaiorMenorIgual(AMaiorPreceMaiorMenorIgual node)
    {
        defaultIn(node);
    }

    public void outAMaiorPreceMaiorMenorIgual(AMaiorPreceMaiorMenorIgual node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorPreceMaiorMenorIgual(AMaiorPreceMaiorMenorIgual node)
    {
        inAMaiorPreceMaiorMenorIgual(node);
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        outAMaiorPreceMaiorMenorIgual(node);
    }

    public void inANivelTresNivelTres(ANivelTresNivelTres node)
    {
        defaultIn(node);
    }

    public void outANivelTresNivelTres(ANivelTresNivelTres node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANivelTresNivelTres(ANivelTresNivelTres node)
    {
        inANivelTresNivelTres(node);
        if(node.getNivelQuatro() != null)
        {
            node.getNivelQuatro().apply(this);
        }
        if(node.getPreceMaiorMenorIgual() != null)
        {
            node.getPreceMaiorMenorIgual().apply(this);
        }
        if(node.getNivelTres() != null)
        {
            node.getNivelTres().apply(this);
        }
        outANivelTresNivelTres(node);
    }

    public void inANivelQuatroNivelTres(ANivelQuatroNivelTres node)
    {
        defaultIn(node);
    }

    public void outANivelQuatroNivelTres(ANivelQuatroNivelTres node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANivelQuatroNivelTres(ANivelQuatroNivelTres node)
    {
        inANivelQuatroNivelTres(node);
        if(node.getNivelQuatro() != null)
        {
            node.getNivelQuatro().apply(this);
        }
        outANivelQuatroNivelTres(node);
    }

    public void inASomaPreceSomaMenos(ASomaPreceSomaMenos node)
    {
        defaultIn(node);
    }

    public void outASomaPreceSomaMenos(ASomaPreceSomaMenos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaPreceSomaMenos(ASomaPreceSomaMenos node)
    {
        inASomaPreceSomaMenos(node);
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        outASomaPreceSomaMenos(node);
    }

    public void inAMenosPreceSomaMenos(AMenosPreceSomaMenos node)
    {
        defaultIn(node);
    }

    public void outAMenosPreceSomaMenos(AMenosPreceSomaMenos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosPreceSomaMenos(AMenosPreceSomaMenos node)
    {
        inAMenosPreceSomaMenos(node);
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outAMenosPreceSomaMenos(node);
    }

    public void inANivelQuatroNivelQuatro(ANivelQuatroNivelQuatro node)
    {
        defaultIn(node);
    }

    public void outANivelQuatroNivelQuatro(ANivelQuatroNivelQuatro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANivelQuatroNivelQuatro(ANivelQuatroNivelQuatro node)
    {
        inANivelQuatroNivelQuatro(node);
        if(node.getNivelCinco() != null)
        {
            node.getNivelCinco().apply(this);
        }
        if(node.getPreceSomaMenos() != null)
        {
            node.getPreceSomaMenos().apply(this);
        }
        if(node.getNivelQuatro() != null)
        {
            node.getNivelQuatro().apply(this);
        }
        outANivelQuatroNivelQuatro(node);
    }

    public void inANivelCincoNivelQuatro(ANivelCincoNivelQuatro node)
    {
        defaultIn(node);
    }

    public void outANivelCincoNivelQuatro(ANivelCincoNivelQuatro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANivelCincoNivelQuatro(ANivelCincoNivelQuatro node)
    {
        inANivelCincoNivelQuatro(node);
        if(node.getNivelCinco() != null)
        {
            node.getNivelCinco().apply(this);
        }
        outANivelCincoNivelQuatro(node);
    }

    public void inAMultPreceMultDiv(AMultPreceMultDiv node)
    {
        defaultIn(node);
    }

    public void outAMultPreceMultDiv(AMultPreceMultDiv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultPreceMultDiv(AMultPreceMultDiv node)
    {
        inAMultPreceMultDiv(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAMultPreceMultDiv(node);
    }

    public void inADivPreceMultDiv(ADivPreceMultDiv node)
    {
        defaultIn(node);
    }

    public void outADivPreceMultDiv(ADivPreceMultDiv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivPreceMultDiv(ADivPreceMultDiv node)
    {
        inADivPreceMultDiv(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivPreceMultDiv(node);
    }

    public void inANivelCincoNivelCinco(ANivelCincoNivelCinco node)
    {
        defaultIn(node);
    }

    public void outANivelCincoNivelCinco(ANivelCincoNivelCinco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANivelCincoNivelCinco(ANivelCincoNivelCinco node)
    {
        inANivelCincoNivelCinco(node);
        if(node.getNivelSeis() != null)
        {
            node.getNivelSeis().apply(this);
        }
        if(node.getPreceMultDiv() != null)
        {
            node.getPreceMultDiv().apply(this);
        }
        if(node.getNivelCinco() != null)
        {
            node.getNivelCinco().apply(this);
        }
        outANivelCincoNivelCinco(node);
    }

    public void inANivelSeisNivelCinco(ANivelSeisNivelCinco node)
    {
        defaultIn(node);
    }

    public void outANivelSeisNivelCinco(ANivelSeisNivelCinco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANivelSeisNivelCinco(ANivelSeisNivelCinco node)
    {
        inANivelSeisNivelCinco(node);
        if(node.getNivelSeis() != null)
        {
            node.getNivelSeis().apply(this);
        }
        outANivelSeisNivelCinco(node);
    }

    public void inAPreceNao(APreceNao node)
    {
        defaultIn(node);
    }

    public void outAPreceNao(APreceNao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPreceNao(APreceNao node)
    {
        inAPreceNao(node);
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        outAPreceNao(node);
    }

    public void inANivelSeisNivelSeis(ANivelSeisNivelSeis node)
    {
        defaultIn(node);
    }

    public void outANivelSeisNivelSeis(ANivelSeisNivelSeis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANivelSeisNivelSeis(ANivelSeisNivelSeis node)
    {
        inANivelSeisNivelSeis(node);
        if(node.getNivelSeis() != null)
        {
            node.getNivelSeis().apply(this);
        }
        if(node.getPreceNao() != null)
        {
            node.getPreceNao().apply(this);
        }
        outANivelSeisNivelSeis(node);
    }

    public void inAPreceParValorNivelSeis(APreceParValorNivelSeis node)
    {
        defaultIn(node);
    }

    public void outAPreceParValorNivelSeis(APreceParValorNivelSeis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPreceParValorNivelSeis(APreceParValorNivelSeis node)
    {
        inAPreceParValorNivelSeis(node);
        if(node.getPreceParValor() != null)
        {
            node.getPreceParValor().apply(this);
        }
        outAPreceParValorNivelSeis(node);
    }

    public void inAParExpPreceParValor(AParExpPreceParValor node)
    {
        defaultIn(node);
    }

    public void outAParExpPreceParValor(AParExpPreceParValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParExpPreceParValor(AParExpPreceParValor node)
    {
        inAParExpPreceParValor(node);
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        outAParExpPreceParValor(node);
    }

    public void inAVarPreceParValor(AVarPreceParValor node)
    {
        defaultIn(node);
    }

    public void outAVarPreceParValor(AVarPreceParValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarPreceParValor(AVarPreceParValor node)
    {
        inAVarPreceParValor(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarPreceParValor(node);
    }

    public void inANumeroPreceParValor(ANumeroPreceParValor node)
    {
        defaultIn(node);
    }

    public void outANumeroPreceParValor(ANumeroPreceParValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroPreceParValor(ANumeroPreceParValor node)
    {
        inANumeroPreceParValor(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumeroPreceParValor(node);
    }

    public void inACaracterePreceParValor(ACaracterePreceParValor node)
    {
        defaultIn(node);
    }

    public void outACaracterePreceParValor(ACaracterePreceParValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaracterePreceParValor(ACaracterePreceParValor node)
    {
        inACaracterePreceParValor(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACaracterePreceParValor(node);
    }

    public void inAStringPreceParValor(AStringPreceParValor node)
    {
        defaultIn(node);
    }

    public void outAStringPreceParValor(AStringPreceParValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringPreceParValor(AStringPreceParValor node)
    {
        inAStringPreceParValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringPreceParValor(node);
    }

    public void inABooleanoPreceParValor(ABooleanoPreceParValor node)
    {
        defaultIn(node);
    }

    public void outABooleanoPreceParValor(ABooleanoPreceParValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanoPreceParValor(ABooleanoPreceParValor node)
    {
        inABooleanoPreceParValor(node);
        if(node.getBooleano() != null)
        {
            node.getBooleano().apply(this);
        }
        outABooleanoPreceParValor(node);
    }

    public void inAChamada(AChamada node)
    {
        defaultIn(node);
    }

    public void outAChamada(AChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamada(AChamada node)
    {
        inAChamada(node);
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getListaExp() != null)
        {
            node.getListaExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAChamada(node);
    }

    public void inANadaListaExp(ANadaListaExp node)
    {
        defaultIn(node);
    }

    public void outANadaListaExp(ANadaListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANadaListaExp(ANadaListaExp node)
    {
        inANadaListaExp(node);
        outANadaListaExp(node);
    }

    public void inAExpListaExp(AExpListaExp node)
    {
        defaultIn(node);
    }

    public void outAExpListaExp(AExpListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpListaExp(AExpListaExp node)
    {
        inAExpListaExp(node);
        {
            List<POuExpEstrela> copy = new ArrayList<POuExpEstrela>(node.getOuExpEstrela());
            Collections.reverse(copy);
            for(POuExpEstrela e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpListaExp(node);
    }

    public void inAOuExpEstrela(AOuExpEstrela node)
    {
        defaultIn(node);
    }

    public void outAOuExpEstrela(AOuExpEstrela node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuExpEstrela(AOuExpEstrela node)
    {
        inAOuExpEstrela(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getBarra() != null)
        {
            node.getBarra().apply(this);
        }
        outAOuExpEstrela(node);
    }
}
