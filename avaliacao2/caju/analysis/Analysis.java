/* This file was generated by SableCC (http://www.sablecc.org/). */

package caju.analysis;

import caju.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAPrograma(APrograma node);
    void caseADecVariavel(ADecVariavel node);
    void caseAIdentificadoresListaNomes(AIdentificadoresListaNomes node);
    void caseAIdentificadorListaNomes(AIdentificadorListaNomes node);
    void caseATipoBaseTipo(ATipoBaseTipo node);
    void caseAVetorTipo(AVetorTipo node);
    void caseAVetorEstrela(AVetorEstrela node);
    void caseABooleanoPalavraTipoBase(ABooleanoPalavraTipoBase node);
    void caseACaracterePalavraTipoBase(ACaracterePalavraTipoBase node);
    void caseANumeroPalavraTipoBase(ANumeroPalavraTipoBase node);
    void caseADecFuncao(ADecFuncao node);
    void caseATipoTipoRetorno(ATipoTipoRetorno node);
    void caseAVazioTipoRetorno(AVazioTipoRetorno node);
    void caseANadaParametros(ANadaParametros node);
    void caseAVariosParametrosParametros(AVariosParametrosParametros node);
    void caseAParametro(AParametro node);
    void caseAParametroEstrela(AParametroEstrela node);
    void caseABloco(ABloco node);
    void caseAAtrib(AAtrib node);
    void caseAListaAtrib(AListaAtrib node);
    void caseAAtribEstrela(AAtribEstrela node);
    void caseAComandoComando(AComandoComando node);
    void caseAComandoSemOpcionalComando(AComandoSemOpcionalComando node);
    void caseASeComandoCasam(ASeComandoCasam node);
    void caseAOutraComandoCasam(AOutraComandoCasam node);
    void caseASeComandoSemCasam(ASeComandoSemCasam node);
    void caseAEnquantoOutra(AEnquantoOutra node);
    void caseAParaOutra(AParaOutra node);
    void caseAParaCadaOutra(AParaCadaOutra node);
    void caseAAtribPontoOutra(AAtribPontoOutra node);
    void caseARetorneOutra(ARetorneOutra node);
    void caseABlocoOutra(ABlocoOutra node);
    void caseAChamadaOutra(AChamadaOutra node);
    void caseAIdentificadorVar(AIdentificadorVar node);
    void caseAVarVar(AVarVar node);
    void caseAChamadaExp(AChamadaExp node);
    void caseANivelZeroExp(ANivelZeroExp node);
    void caseANivelUmExp(ANivelUmExp node);
    void caseAPreceOu(APreceOu node);
    void caseAPreceE(APreceE node);
    void caseANivelUmNivelUm(ANivelUmNivelUm node);
    void caseANivelDoisNivelUm(ANivelDoisNivelUm node);
    void caseAPreceIgual(APreceIgual node);
    void caseANivelDoisNivelDois(ANivelDoisNivelDois node);
    void caseANivelTresNivelDois(ANivelTresNivelDois node);
    void caseAMenorIgualPreceMaiorMenorIgual(AMenorIgualPreceMaiorMenorIgual node);
    void caseAMaiorIgualPreceMaiorMenorIgual(AMaiorIgualPreceMaiorMenorIgual node);
    void caseAMenorPreceMaiorMenorIgual(AMenorPreceMaiorMenorIgual node);
    void caseAMaiorPreceMaiorMenorIgual(AMaiorPreceMaiorMenorIgual node);
    void caseANivelTresNivelTres(ANivelTresNivelTres node);
    void caseANivelQuatroNivelTres(ANivelQuatroNivelTres node);
    void caseASomaPreceSomaMenos(ASomaPreceSomaMenos node);
    void caseAMenosPreceSomaMenos(AMenosPreceSomaMenos node);
    void caseANivelQuatroNivelQuatro(ANivelQuatroNivelQuatro node);
    void caseANivelCincoNivelQuatro(ANivelCincoNivelQuatro node);
    void caseAMultPreceMultDiv(AMultPreceMultDiv node);
    void caseADivPreceMultDiv(ADivPreceMultDiv node);
    void caseANivelCincoNivelCinco(ANivelCincoNivelCinco node);
    void caseANivelSeisNivelCinco(ANivelSeisNivelCinco node);
    void caseAPreceNao(APreceNao node);
    void caseANivelSeisNivelSeis(ANivelSeisNivelSeis node);
    void caseAPreceParValorNivelSeis(APreceParValorNivelSeis node);
    void caseAParExpPreceParValor(AParExpPreceParValor node);
    void caseAVarPreceParValor(AVarPreceParValor node);
    void caseANumeroPreceParValor(ANumeroPreceParValor node);
    void caseACaracterePreceParValor(ACaracterePreceParValor node);
    void caseAStringPreceParValor(AStringPreceParValor node);
    void caseABooleanoPreceParValor(ABooleanoPreceParValor node);
    void caseAChamada(AChamada node);
    void caseANadaListaExp(ANadaListaExp node);
    void caseAExpListaExp(AExpListaExp node);
    void caseAOuExpEstrela(AOuExpEstrela node);

    void caseTNumero(TNumero node);
    void caseTSoma(TSoma node);
    void caseTMenos(TMenos node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTIgual(TIgual node);
    void caseTMaior(TMaior node);
    void caseTMenor(TMenor node);
    void caseTMaiorIgual(TMaiorIgual node);
    void caseTMenorIgual(TMenorIgual node);
    void caseTInicio(TInicio node);
    void caseTFim(TFim node);
    void caseTBooleanoPalavra(TBooleanoPalavra node);
    void caseTNumeroPalavra(TNumeroPalavra node);
    void caseTCaracterePalavra(TCaracterePalavra node);
    void caseTVetorPalavra(TVetorPalavra node);
    void caseTPalavraVazio(TPalavraVazio node);
    void caseTString(TString node);
    void caseTParEsq(TParEsq node);
    void caseTParDir(TParDir node);
    void caseTColcheteEsq(TColcheteEsq node);
    void caseTColcheteDir(TColcheteDir node);
    void caseTPonto(TPonto node);
    void caseTVirgula(TVirgula node);
    void caseTBarra(TBarra node);
    void caseTPontoEVirgula(TPontoEVirgula node);
    void caseTIniciador(TIniciador node);
    void caseTAtribuicao(TAtribuicao node);
    void caseTDoisPontos(TDoisPontos node);
    void caseTBooleano(TBooleano node);
    void caseTEnquanto(TEnquanto node);
    void caseTParaCada(TParaCada node);
    void caseTPara(TPara node);
    void caseTRetorne(TRetorne node);
    void caseTSe(TSe node);
    void caseTSenao(TSenao node);
    void caseTNao(TNao node);
    void caseTE(TE node);
    void caseTOu(TOu node);
    void caseTVazio(TVazio node);
    void caseTCaractere(TCaractere node);
    void caseTIdentificador(TIdentificador node);
    void caseTComentarioLinha(TComentarioLinha node);
    void caseTComentarioBloco(TComentarioBloco node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
