Package caju;

Helpers
 digito = ['0' .. '9'];
 espaco = ' ';
 rc = 13;
 nl = 10;
 quebra_linha = [rc + nl];
 letra_minusc = ['a'..'z'];
 letra_maiusc = ['A'..'Z'];
 tudo = [0..0xffff];
 tudo_sem_nl = [tudo - quebra_linha];
 string_input = [tudo - ['''+'"']];
 identificadorhelper = (letra_maiusc | letra_minusc)(letra_maiusc | letra_minusc | digito | '_')*;
 comentario = [tudo - '{'];
 digitos = digito+;
 numero_real = '-'?digitos','digitos;
 numero_inteiro = '-'?digitos;
 
Tokens 
 numero = (numero_real | numero_inteiro);
 soma = '+';
 menos = '-';
 mult = '*';
 div = '/';
 igual = '=';
 maior = '>';
 menor = '<';
 maior_igual = '>=';
 menor_igual = '<=';
 inicio = 'inicio';
 fim = 'fim';
 booleano_palavra = 'booleano';
 numero_palavra = 'numero';
 caractere_palavra = 'caractere';
 vetor_palavra = 'vetor';
 palavra_vazio = 'vazio';
 string = '"'string_input*'"';
 par_esq = '(';
 par_dir = ')';
 colchete_esq = '[';
 colchete_dir = ']';
 ponto = '.';
 virgula = ',';
 barra = '|';
 ponto_e_virgula = ';';
 iniciador = '->';
 atribuicao = ':=';
 dois_pontos = ':';
 booleano = 'verdadeiro' | 'falso';
 enquanto = 'enquanto';
 para_cada = 'para cada';
 para = 'para';
 retorne = 'retorne';
 se = 'se';
 senao = 'senao';
 nao = 'nao';
 e = 'e';
 ou = 'ou';
 vazio = (espaco | rc | nl)+;
 caractere = '''(string_input | '\'letra_minusc)''';
 identificador = identificadorhelper;
 comentario_linha = '#'tudo_sem_nl*;
 comentario_bloco = '{'comentario*'}';


Ignored Tokens
 comentario_linha,
 comentario_bloco,
 vazio;

Productions
 
 //Produção inicial
 programa = dec_variavel* dec_funcao*;

 //Declaração variável
 dec_variavel = tipo lista_nomes ponto;
 
 //Define os identificadores das variáveis
 lista_nomes = 
 	 {identificadores} identificador virgula lista_nomes
 	|{identificador} identificador;
 
 //Tipo das variáveis, que pode ser um tipo primitivo ou array
 tipo =
 	 {tipo_base} tipo_base
 	|{vetor} vetor_palavra tipo_base colchete_esq exp colchete_dir vetor_estrela*;
 
 vetor_estrela = colchete_esq exp colchete_dir;
 
 tipo_base = 
 	 {booleano_palavra} booleano_palavra
	|{caractere_palavra} caractere_palavra
	|{numero_palavra} numero_palavra;
	

 dec_funcao = iniciador? tipo_retorno identificador par_esq parametros par_dir bloco;
 
 tipo_retorno = {tipo} tipo | {vazio} palavra_vazio;
 
 parametros =
 	{nada}
 	|{varios_parametros} parametro parametro_estrela*; 
 
 parametro = tipo identificador;
 
 parametro_estrela = barra parametro;
 
 bloco = inicio dec_variavel* comando* fim;
 
 atrib = var atribuicao exp;
 
 lista_atrib = atrib atrib_estrela*;

 atrib_estrela = virgula atrib;
  
 comando =
 	 {comando} comando_casam
 	|{comando_sem_opcional} comando_sem_casam; 
  
 comando_casam =
  	 {se} se par_esq exp par_dir [esq]:comando_casam senao [dir]:comando_casam
  	|{outra} outra;
 	 
 comando_sem_casam = 
 	 {se} se par_esq exp par_dir comando_casam;    
 
 
 outra = 
 	 {enquanto} enquanto par_esq exp par_dir comando
 	|{para} para par_esq [atrib_esq]:lista_atrib [esq]:ponto_e_virgula exp [dir]:ponto_e_virgula [atrib_dir]:lista_atrib par_dir comando
 	|{para_cada} para_cada par_esq tipo [esq]:identificador dois_pontos [dir]:identificador par_dir comando
 	|{atrib_ponto} atrib ponto
 	|{retorne} retorne exp? ponto
 	|{bloco} bloco
 	|{chamada} chamada ponto;
 
 var = 
 	 {identificador} identificador
 	|{var} var colchete_esq exp colchete_dir;
 
 exp =
 	 {chamada} chamada
 	|{nivel_zero} exp prece_ou nivel_um |{nivel_um} nivel_um;
 
 //prefixo prece significa "precedência" e quanto maior o nível maior a precedência

 //nivel 0
 prece_ou = ou;
 
 prece_e = e;
 
 nivel_um = 
 	 {nivel_um} nivel_um prece_e nivel_dois 
 	|{nivel_dois} nivel_dois;
 
 prece_igual = igual;
 
 nivel_dois = 
 	 {nivel_dois} nivel_dois prece_igual nivel_tres 
 	|{nivel_tres} nivel_tres;
 
 prece_maior_menor_igual = 
 	 {menor_igual} menor_igual
 	|{maior_igual} maior_igual
 	|{menor} menor
 	|{maior} maior;
 
 nivel_tres = 
 	 {nivel_tres} nivel_tres prece_maior_menor_igual nivel_quatro 
 	|{nivel_quatro} nivel_quatro;
 
 prece_soma_menos = {soma} soma | {menos} menos;
 
 nivel_quatro = 
 	 {nivel_quatro} nivel_quatro prece_soma_menos nivel_cinco 
 	|{nivel_cinco} nivel_cinco;
 
 prece_mult_div = {mult} mult | {div} div;
 
 nivel_cinco = 
 	 {nivel_cinco} nivel_cinco prece_mult_div nivel_seis 
 	|{nivel_seis} nivel_seis;
 
 prece_nao = nao;
 
 nivel_seis = 
 	 {nivel_seis} prece_nao nivel_seis 
 	|{prece_par_valor} prece_par_valor;
 
 prece_par_valor = 
 	 {par_exp} par_esq exp par_dir
 	|{var} var
 	|{numero} numero 
 	|{caractere} caractere
 	|{string} string
 	|{booleano} booleano;
 
 chamada = identificador par_esq lista_exp par_dir;
 
 lista_exp = 
 	{nada}
 	|{exp} exp ou_exp_estrela*;
 	
 ou_exp_estrela = barra exp; 
 